/**************************************************************************
File name: 	DebugSerial.c
Author: 		
Version: 		V1.0    Date:
Description:  	串口驱动，提供串口相关的驱动
Others: 		无
History:
****************************************************************************/
/*********************  系统级别的相关头文件    ***************/
#include <stdio.h>
//#include <stdint.h>
#include "stdlib.h"
#include <string.h>
#include <stdarg.h>

/*********************  bsp提供的相关头文件    ***************/
#include "uart.h"
#include "udma.h"
#include "watchdog.h"

#include "hw_ints.h"
#include "gptimer.h"
#include "hw_memmap.h"

/*********************  内部声明的相关头文件    ***************/
#include "BspConfig.h"
#include "InnerUart.h"

/*********************  内部的宏定义		      ***************/
#define IOC_UARTRXD_UART0                       0x400D4100  // Selects one of the 32 pins on 
                                                            // the four 8-pin I/O-ports (port 
                                                            // A, port B, port C, and port D) 
                                                            // to be the UART0 RX. 
                                            
#define IOC_UARTRXD_UART1						0x400D4108  // Selects one of the 32 pins on 
															// the four 8-pin I/O-ports (port 
															// A, port B, port C, and port D) 
															// to be the UART1 RX. 

//SHELL功能相关的宏定义
#define MAX_CMD_LEN								128
#define MAX_CMD_HISTORY							5
#define MAX_ARGS								(MAX_CMD_LEN >> 3)			//1//1/8
#define ENTER_KEY								0x0d
#define BACK_KEY								0x08
#define BEEP_KEY								0x07
#define UP_KEY									0x41
#define DOWN_KEY								0x42
#define RIGHT_KEY								0x43
#define LEFT_KEY								0x44
#define HOME_KEY								0x48
#define END_KEY									0x4b

#define MAX_LINE_SIZE							(100)

/*****************************************************************************/
static const char StartString[]		= "*************************************************************";
static const char *Prompt			= "SHELL:\\";
char			  *SecPrompt		= "\0";
static const char *ThirPrompt		= "\\>";
static const CMD_MENU *pCMD			= NULL; //用于指向上下级菜单
static const CMD_MENU *pLastCMD		= NULL;
static const CMD_MENU *pCmdTable	= NULL;

static char			  *command		= NULL;
static char H_command[MAX_CMD_HISTORY][MAX_CMD_LEN];
static u16 EditPos					= 0; //保存当前
static u16 InsPos					= 0;
static u16 HistoryCmdPos			= 0;
static u16 CurrentCmdPos			= 0;
static u32 s_ulSetParaFlag			= 0;

u8		   *s_PrintfEnable			= NULL;
static char	s_ucPrintBuf[MAX_LINE_SIZE];

static MSG_ST g_stRecvMsg = {0};

//#define MAX_RECV_SIZE   128
//static char s_ucRecvBuf[MAX_RECV_SIZE] = {0};
//static u32 s_RecvCounts = 0;

/*********************  内部函数	      ***************/
static void (*SetParaCallBack)(char *);
static void CommandHook(int argc, char * argv []);
static void RunCommand( const char* cmdline);
static int  DRV_ShellGetKeyFromDma(void);
static int GetCmdMatche( const char* cmdline );
static void EnterKeyProc(void);
static void BackKeyProc(void);
static void RightKeyProc(void);
static void LeftKeyProc(void);
static void HomeKeyProc(void);
static void EndKeyProc(void);
static void UPKeyProc(void);
static void DownKeyProc(void);
static void NormalKeyProc(u32 key );
static void ChangeShellMode(char *pPrompt, setPara sp);

static u8 DRV_WaitChar(void);

static void PrintOneLineData(u32 u32FrameLen, u8* pu8FrameData);

/*******************************************************************************
* Function Name  	: DRV_UartInit
* Description    	: 串口驱动初始化
* Input          	: None
* Output         	: None
* Return         	: None
* Author			: 	
* Others			: None
********************************************************************************/
void DRV_UartInit(void)
{
    // Set IO clock to the same as system clock
    SysCtrlIOClockSet(SYS_CTRL_SYSDIV_32MHZ);

    // Enable UART peripheral module
    SysCtrlPeripheralEnable(HAL_CTRL_PERIPH_UART);

    // Disable UART function
    UARTDisable(HAL_UART_PORT);

    // Disable all UART module interrupts
    UARTIntDisable(HAL_UART_PORT, 0x1FFF);

    // Set IO clock as UART clock source
    UARTClockSourceSet(HAL_UART_PORT, UART_CLOCK_PIOSC);

    // Map UART signals to the correct GPIO pins and configure them as
    // hardware controlled.
    
    // RS232初始化
	IOCPinConfigPeriphOutput(GPIO_D_BASE, GPIO_PIN_1, IOC_MUX_OUT_SEL_UART1_TXD);
	IOCPinConfigPeriphInput(GPIO_D_BASE, GPIO_PIN_0,IOC_UARTRXD_UART1);
	GPIOPinTypeUARTInput(GPIO_D_BASE, GPIO_PIN_0);
	GPIOPinTypeUARTOutput(GPIO_D_BASE, GPIO_PIN_1);
    
    //
    // Configure the UART for 115,200, 8-N-1 operation.
    // This function uses SysCtrlClockGet() to get the system clock
    // frequency.  This could be also be a variable or hard coded value
    // instead of a function call.
    //
    UARTConfigSetExpClk(HAL_UART_PORT, 
                        SysCtrlClockGet(), 
                        115200,
                        (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
    UARTEnable(HAL_UART_PORT);
}

/*******************************************************************************
* Function Name  	: WaitForPutChar
* Description    	: 等待字符输出
* Input          	: None
* Output         	: None
* Return         	: None
* Author			: 	
* Others			: None
********************************************************************************/
static void WaitForPutChar(void)
{
	u8 u8Rec=0;
	u16 u16DeyTime = 0;

	//while(HWREG(HAL_UART_PORT + UART_O_FR) & UART_FR_BUSY)
	while(HW_REG(HAL_UART_PORT + UART_O_FR) & UART_FR_TXFF)
	{
		WatchdogClear();
		u16DeyTime++;
		if(0xffff == u16DeyTime)
		{
			u16DeyTime = 0;
			u8Rec++;
			if(u8Rec > 40)
			{
				return; /*ero*/
			}
		}
	}
}

/*******************************************************************************
* Function Name  	: DRV_ShellSendChar
* Description    	: Shell界面字符输出
* Input          	: ch -- 将要输出到Shell界面的字符
* Output         	: None
* Return         	: 将要输出到Shell界面的字符
* Author			: 	
* Others			: None
********************************************************************************/
u32  DRV_ShellSendChar(u32 ch)
{
	if (ch == '\n')
	{
		WaitForPutChar();
		HW_REG(HAL_UART_PORT + UART_O_DR) = 0x0d;
	}

	/*等待当前任务处理完毕*/
	WaitForPutChar();

	return (HW_REG(HAL_UART_PORT + UART_O_DR) = ch);
}

/*******************************************************************************
* Function Name  	: DRV_WaitChar
* Description    	: 等待从串口接收一个有效的字符
* Input          	: None
* Output         	: None
* Return         	: 返回从串口接收一个有效的字符; 
					  如果等待超时，返回错误码0xff
* Author			: 	
* Others			: None
********************************************************************************/
static u8 DRV_WaitChar(void)
{
	u8 u8Rec=0;
	u16 u16DeyTime = 0;

	while(HW_REG(HAL_UART_PORT + UART_O_FR) & UART_FR_RXFE)
	{
		WatchdogClear();
		u16DeyTime++;
		if(0xffff == u16DeyTime)
		{
			u8Rec++;
			if(u8Rec > 40)
			{
				return 0xff; /*ero*/
			}
		}
	}
	u8Rec = HW_REG(HAL_UART_PORT + UART_O_DR);
	//DRV_Printf("%x ", u8Rec);

	return u8Rec;
}

/*******************************************************************************
* Function Name  	: DRV_ShellGetChar
* Description    	: None
* Input          	: None
* Output         	: None
* Return         	: 返回从串口的DMA缓冲区获取一个字符; 
					  循环3000次，如果还没有接收到字符，则退出循环
* Author			: 	
* Others			: None
********************************************************************************/
int DRV_ShellGetChar(void)
{
	int ch;
	int loop = 3000;

	ch = -1;
	while (-1 == ch)
	{
		ch = DRV_WaitChar();
		if (loop-- < 1)
		{
			break;
		}
	}

	return ch;
}
