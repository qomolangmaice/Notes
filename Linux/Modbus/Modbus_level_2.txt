
/*********************************************************************************************************************
* Function Name  	: ProcFileUploadStartReply
* Description    	: 回复主机下发的上传文件启动命令 
* Input          	: pu8RecvMsg -- 消息数据
* Output         	: None
* Return         	: None
* Author			: wwx423495     2017/3/17
* Others			: 回复给主机的数据格式为
*                   1byte    1byte     1byte      1byte      1byte       4byte       1byte        2byte     2byte
*                   地址位   功能码    子功能码   数据长度   文件类型    文件长度    数据帧长度   文件CRC   crc  
**********************************************************************************************************************/
static void ProcFileUploadStartReply(void)
{
	u8  ucCrcIndex;
    u32 u32EquipAddr = 0;
    u8 *pu8PackBuf = NULL;

    MSG_ST TmpTxMsg = {0};
    TmpTxMsg.length= 0;
    (void)memset(TmpTxMsg.buf, 0, MODBUS_MSG_BUF_SIZE);
    pu8PackBuf = TmpTxMsg.buf;
	
	// 获取当前设备地址
    u32EquipAddr = Get485EquipAddr();
    // 从节点地址打包
    *pu8PackBuf++ = (u8)u32EquipAddr;
    // 功能码打包
    *pu8PackBuf++ = g_stModbusRxMsg.m_u8AppCmd;
    // 子功能码打包
    *pu8PackBuf++ = g_stModbusRxMsg.m_u8AppChildCmd;
    // 数据长度打包
    *pu8PackBuf++ = UPLOAD_START_REPLY_DATA_DATA_LEN;
    // 上传文件类型打包
    *pu8PackBuf++ = g_stUploadFile.m_u8FileType;
    // 上传文件长度打包
    UINT32_TO_BUF_BIG_ENDIAN(pu8PackBuf, g_stUploadFile.m_u32FileSize);
    // 上传文件数据帧长度打包
    *pu8PackBuf++ = g_stUploadFile.m_u8FrameSize;
    // 上传文件CRC打包
    *pu8PackBuf++ = HI_UINT16(g_stUploadFile.m_u16FileCRC);
    *pu8PackBuf++ = LO_UINT16(g_stUploadFile.m_u16FileCRC);
    
    // 计算crc的位置
    ucCrcIndex = (u8)(pu8PackBuf - TmpTxMsg.buf); 

    //封装crc的值
    PackMdsTxCrc(TmpTxMsg.buf, ucCrcIndex , 0xFFFF);

    // 更新发送数据长度
    TmpTxMsg.length = ucCrcIndex + MDS_REPLY_CRC_LEN;

    // 将要发送的消息添加到消息发送队列中
    NorthModbus_In_MsgQueue(&g_stModbusTxQueue, &TmpTxMsg.buf[0], TmpTxMsg.length);
}

/*************************************************************************************************
* Function Name  	: ProcFileUploadDataReply
* Description    	: 回复主机下发的上传文件数据命令 
* Input          	: None
* Output         	: None
* Return         	: None
* Author			: wwx423495     2017/3/17
* Others			: 回复给主机的数据格式为
*                   1byte    1byte     1byte      1byte      1byte       2byte    N bytes  2byte
*                   地址位   功能码     子功能码    数据长度   文件类型     帧序号   帧数据    crc  
**************************************************************************************************/
static void ProcFileUploadDataReply(u16 u16FrameSeqNum, u8 *pFrameDataBuf)
{
	u8  ucCrcIndex = 0;
    u32 u32EquipAddr = 0;
    u8 *pu8PackBuf = NULL;

    MSG_ST TmpTxMsg = {0};
    TmpTxMsg.length= 0;
    (void)memset(TmpTxMsg.buf, 0, MODBUS_MSG_BUF_SIZE);
    pu8PackBuf = TmpTxMsg.buf;
	
    // 获取当前设备地址
    u32EquipAddr = Get485EquipAddr();
    // 从节点地址打包
    *pu8PackBuf++ = (u8)u32EquipAddr;
    // 功能码打包
    *pu8PackBuf++ = g_stModbusRxMsg.m_u8AppCmd;
    // 子功能码打包
    *pu8PackBuf++ = g_stModbusRxMsg.m_u8AppChildCmd;
    // 数据长度打包
    *pu8PackBuf++ = UPLOAD_DATA_DATA_LEN + g_stUploadFile.m_u8FrameSize;
    // 上传文件类型打包
    *pu8PackBuf++ = g_stUploadFile.m_u8FileType;
    // 帧序号打包
    *pu8PackBuf++ = HI_UINT16(u16FrameSeqNum);
    *pu8PackBuf++ = LO_UINT16(u16FrameSeqNum);

    //PrintFrameData(g_stUploadFile.m_u8FrameSize, pFrameDataBuf);

    // 上传数据打包
    memcpy(pu8PackBuf, pFrameDataBuf, g_stUploadFile.m_u8FrameSize);
    pu8PackBuf += g_stUploadFile.m_u8FrameSize;
    
    // 计算crc的位置
    ucCrcIndex = (u8)(pu8PackBuf - TmpTxMsg.buf);

    //封装crc的值
    PackMdsTxCrc(TmpTxMsg.buf, ucCrcIndex , 0xFFFF);

    // 更新发送数据长度
    TmpTxMsg.length = ucCrcIndex + MDS_REPLY_CRC_LEN;

    PrintFrameData(TmpTxMsg.length, &TmpTxMsg.buf[0]);

    // 将要发送的消息添加到消息发送队列中
    NorthModbus_In_MsgQueue(&g_stModbusTxQueue, &TmpTxMsg.buf[0], TmpTxMsg.length);
}

/**************************************************************************************
* Function Name  	: ProcFileUploadDataFinishReply
* Description    	: 回复主机下发的上传文件数据完成命令 
* Input          	: pu8RecvMsg -- 消息数据
* Output         	: None
* Return         	: None
* Author			: wwx423495     2017/3/17
* Others			: 回复给主机的数据格式为
*                   1byte    1byte     1byte      1byte      1byte      2byte    2byte
*                   地址位   功能码    子功能码   数据长度   文件类型   文件CRC  crc  
***************************************************************************************/
static void ProcFileUploadDataFinishReply(void)
{
	u8  ucCrcIndex = 0;
    u32 u32EquipAddr = 0;
    u8 *pu8PackBuf = NULL;

    MSG_ST TmpTxMsg = {0};
    TmpTxMsg.length= 0;
    (void)memset(TmpTxMsg.buf, 0, MODBUS_MSG_BUF_SIZE);
    pu8PackBuf = TmpTxMsg.buf;
	
	// 获取当前设备地址
    u32EquipAddr = Get485EquipAddr();
    // 从节点地址打包
    *pu8PackBuf++ = (u8)u32EquipAddr;
    // 功能码打包
    *pu8PackBuf++ = g_stModbusRxMsg.m_u8AppCmd;
    // 子功能码打包
    *pu8PackBuf++ = g_stModbusRxMsg.m_u8AppChildCmd;
    // 数据长度打包
    *pu8PackBuf++ = UPLOAD_END_REPLY_DATA_DATA_LEN;
    // 上传文件类型打包
    *pu8PackBuf++ = g_stUploadFile.m_u8FileType;
    // 文件CRC打包
    *pu8PackBuf++ = HI_UINT16(g_stUploadFile.m_u16FileCRC);
    *pu8PackBuf++ = LO_UINT16(g_stUploadFile.m_u16FileCRC);
    
    // 计算crc的位置
    ucCrcIndex = (u8)(pu8PackBuf - TmpTxMsg.buf);

    //封装crc的值
    PackMdsTxCrc(TmpTxMsg.buf, ucCrcIndex , 0xFFFF);

    // 更新发送数据长度
    TmpTxMsg.length = ucCrcIndex + MDS_REPLY_CRC_LEN;

    // 将要发送的消息添加到消息发送队列中
    NorthModbus_In_MsgQueue(&g_stModbusTxQueue, &TmpTxMsg.buf[0], TmpTxMsg.length);

    PrintFrameData(TmpTxMsg.length, &TmpTxMsg.buf[0]);
    DRV_Printf("ProcFileUploadDataFinishReply end .. \n");
}

/**************************************************************************************************
Function: 	 ReadBoardElabelHead
Description:  读出单板电子标签帧头信息
Input: 		 pusElabelLen -- 电子标签长度指针
			 pusElabelCrc -- 电子标签CRC校验值指针	
Output: 	     None
Returns: 	 None
Author: 	     None
Others: 	
***************************************************************************************************/
static void ReadBoardElabelHead(u16 * pusElabelLen, u16 * pusElabelCrc)
{
	u8 i;
	u8 ucHeadCheckSum = 0;
	u8 ucElabelHead[BOARD_ELABEL_HEAD_LENGTH] = {0};
	u16 usElabelLen = 0;

	DRV_FlashRead(ELABEL_START_ADDR, ucElabelHead, BOARD_ELABEL_HEAD_LENGTH);

	PrintFrameData(BOARD_ELABEL_HEAD_LENGTH, ucElabelHead);

	/* 计算电子标签头校验和 */
	for (i = 0; i < 15; i++)
	{
		ucHeadCheckSum += ucElabelHead[i];
	}

	DRV_Printf("ucHeadCheckSum = %d\n", ucHeadCheckSum);

	/* 检验电子标签头起始字节和校验和 */
	if (('a' != ucElabelHead[0]) || ('A' != ucElabelHead[1]) || (ucHeadCheckSum != ucElabelHead[15]))
	{
	    *pusElabelLen = 0;
	    *pusElabelCrc = 0;
		return;
	}

    /* 计算电子标签长度(此处未用加法而使用"或运算") */
    usElabelLen = (((u16)ucElabelHead[2]) << 8) | ucElabelHead[3];

    /* 如果电子标签长度越界 */
    if (usElabelLen > BOARD_ELABEL_LENGTH)
    {
        *pusElabelLen = 0;
        *pusElabelCrc = 0;
		return;
    }

    *pusElabelLen = (((u16)ucElabelHead[2]) << 8) | ucElabelHead[3];
    *pusElabelCrc = (((u16)ucElabelHead[4]) << 8) | ucElabelHead[5];
}
