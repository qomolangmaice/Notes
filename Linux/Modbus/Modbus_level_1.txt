
/*****************************************************************************
* Function Name  	: ProcFileUploadStart
* Description    	: 处理主机下发的上传文件启动命令 
* Input          	: pu8RecvMsg -- 消息数据
* Output         	: None
* Return         	: None
* Author			: wwx423495     2017/3/14
* Others			: 回复给主机的数据格式为
*                   1byte    1byte     1byte      1byte      1byte     2byte
*                   地址位   功能码     子功能码   数据长度    文件类型   crc  
******************************************************************************/
static void ProcFileUploadStart(u8 *pu8RecvMsg)
{
    DRV_Printf("ProcFileUploadStart start... \n");
    
    // 文件上传启动测试数据: 00 41 05 01 90 21 C1
    u8  u8FileType = 0;
	SIG_EXT_VAL uNewDataFlag;
	RECORD_HEAD_TABLE st_RecInfoHead = {0};

    // 校验数据长度
	if (UPLOAD_START_DATA_LEN != pu8RecvMsg[UPLOAD_START_DATA_LEN_INDEX])
	{
		g_stModbusRxMsg.m_eErrorType = UPLOAD_START_ERR1;
		return;
	}

    // 无线数据文件测试用代码
	//WriteDataIntoFlash();
	//s_stCycRecTable[1].m_u32RecStartAddr = AF_COM_REC_START_ADDR;
	//s_stCycRecTable[1].m_u32RecStopAddr  = AF_COM_REC_START_ADDR + 256;
	
    // 根据文件类型，上传文件的Flash起始读取地址，上传文件的Flash终止读取地址
    // 得到文件长度，数据帧长度，文件CRC
    u8FileType = pu8RecvMsg[UPLOAD_START_FILE_TYPE_INDEX];
    switch (u8FileType)
    {
    case BOARD_ELABEL_FILE:
        g_stUploadFile.m_u32FlashReadStartAddr = ELABEL_DATA_ADDR;
        g_stUploadFile.m_u32FlashReadEndAddr   = ELABEL_END_ADDR;
        break;
        
    case WIRELESS_DATA_FILE:
        //DRV_Printf("WIRELESS_DATA_FILE .. \n");
		s_stCycRecTable[1].m_u32RecStopSide = s_stCycRecTable[1].m_u16CurrSide;
		s_stCycRecTable[1].m_u32RecStopAddr = s_stCycRecTable[1].m_u32CurrAddr;
		//DRV_Printf("ProcFileUploadStart -- m_u32RecStopSide = %d\n", s_stCycRecTable[1].m_u32RecStopSide);
		//DRV_Printf("ProcFileUploadStart -- m_u32RecStopAddr = 0%X\n", s_stCycRecTable[1].m_u32RecStopAddr);

		// 初始化文件加载的Flash读取起始地址和读取终止地址
        g_stUploadFile.m_u32FlashReadStartAddr = s_stCycRecTable[1].m_u32RecStartAddr;
        g_stUploadFile.m_u32FlashReadEndAddr   = s_stCycRecTable[1].m_u32RecStopAddr;
        //DRV_Printf("ProcFileUploadStart -- m_u32RecStartAddr = 0%X\n", s_stCycRecTable[1].m_u32RecStartAddr);
        
		s_stCycRecTable[1].m_u16CurrSide = (s_stCycRecTable[1].m_u16CurrSide + 1) % s_stCycRecTable[1].m_u16QueueLen;
		s_stCycRecTable[1].m_u32CurrAddr = s_stCycRecTable[1].m_u32SideStAddrQueue[s_stCycRecTable[1].m_u16CurrSide];

		//DRV_Printf("ProcFileUploadStart -- m_u16CurrSide = %d\n", s_stCycRecTable[1].m_u16CurrSide);
		//DRV_Printf("ProcFileUploadStart -- m_u32CurrAddr = 0%X\n", s_stCycRecTable[1].m_u32CurrAddr);
		if (NULL != s_stCycRecTable[1].m_pEraseFunc)
		{
			s_stCycRecTable[1].m_pEraseFunc(s_stCycRecTable[1].m_u32CurrAddr, 
			(s_stCycRecTable[1].m_u32SideEndAddrQueue[s_stCycRecTable[1].m_u16CurrSide] - 
			s_stCycRecTable[1].m_u32SideStAddrQueue[s_stCycRecTable[1].m_u16CurrSide]));
		}

		st_RecInfoHead.m_u16RecordId = 0;
		s_stCycRecTable[1].m_u32CurrIndex++;
		st_RecInfoHead.m_u32RecordIndex = s_stCycRecTable[1].m_u32CurrIndex;
		st_RecInfoHead.m_u16Crc = CalcCcittCrc16ByTable((u16)CRC_INVALID, 
		(u8*)&st_RecInfoHead, 
		(sizeof(RECORD_HEAD_TABLE) - sizeof(u16)));

		s_stCycRecTable[1].m_pWriteFunc(s_stCycRecTable[1].m_u32SideStAddrQueue[s_stCycRecTable[1].m_u16CurrSide],
		(sizeof(RECORD_HEAD_TABLE)),
		(u8*)&st_RecInfoHead);
		s_stCycRecTable[1].m_u32CurrAddr += sizeof(RECORD_HEAD_TABLE);
 		uNewDataFlag.uSigVal.u16Val = AF_DATA_REFRESH_FLAG_NO;
 		Modbus_SetSigVal((u16)MDS_REG_SIGNAL_WIRELESS_DATA_UPDATE_FLAG, &uNewDataFlag);
        
        break;
    
    case RUN_LOG_FILE:
		s_stCycRecTable[0].m_u32RecStopSide = s_stCycRecTable[0].m_u16CurrSide;
		s_stCycRecTable[0].m_u32RecStartAddr = s_stCycRecTable[0].m_u32CurrAddr;

		// 初始化文件加载的Flash读取起始地址和读取终止地址
        g_stUploadFile.m_u32FlashReadStartAddr =  s_stCycRecTable[0].m_u32RecStartAddr;
        g_stUploadFile.m_u32FlashReadEndAddr   =  s_stCycRecTable[0].m_u32RecStartAddr;
        
		s_stCycRecTable[0].m_u16CurrSide = (s_stCycRecTable[0].m_u16CurrSide + 1) % s_stCycRecTable[0].m_u16QueueLen;
		s_stCycRecTable[0].m_u32CurrAddr = s_stCycRecTable[0].m_u32SideStAddrQueue[s_stCycRecTable[0].m_u16CurrSide];
        break;
        
    default:
        g_stModbusRxMsg.m_eErrorType = UPLOAD_START_ERR2;
        return ;
    }
    GetFileUploadInfo(u8FileType, g_stUploadFile.m_u32FlashReadStartAddr, g_stUploadFile.m_u32FlashReadEndAddr);

	g_stUploadFile.m_u16MaxFrame  = g_stUploadFile.m_u32FileSize / g_stUploadFile.m_u8FrameSize;
	if ( 0 != (g_stUploadFile.m_u32FileSize % g_stUploadFile.m_u8FrameSize) )
	{
		g_stUploadFile.m_u16MaxFrame++;
	}
	DRV_Printf("g_stUploadFile.m_u16MaxFrame = %d\n", g_stUploadFile.m_u16MaxFrame);

    // 更新为下一个状态 -- 文件上传传输态
    g_stUploadFile.m_u8ProcessState = LOAD_DATA;
    
    ProcFileUploadStartReply();

    // 重新初始化文件计算CRC
    g_stUploadFile.m_u16FileCRC = 0xFFFF;

    DRV_Printf("ProcFileUploadStart stop... \n");
}

/***************************************************************************************
* Function Name  	: ProcFileUploadData
* Description    	: 处理主机下发的上传文件数据命令 
* Input          	: pu8RecvMsg -- 消息数据
* Output         	: None
* Return         	: None
* Author			: wwx423495     2017/3/14
* Others			: 主机下发的数据格式为
*                   1byte    1byte     1byte      1byte      1byte       2byte    2byte
*                   地址位   功能码    子功能码   数据长度   文件类型    帧序号   crc  
****************************************************************************************/
static void ProcFileUploadData(u8 *pu8RecvMsg)
{
    DRV_Printf("ProcFileUploadData start... \n");
    // 测试数据:
    // 1 -- 00 41 06 03 90 00 01 5D B8
    // 2 -- 00 41 06 03 90 00 02 1D B9
    // 3 -- 00 41 06 03 90 00 03 DC 79
    // 4 -- 00 41 06 03 90 00 04 9D BB
    
    u8  u8FileType = 0;
    u8  u8FrameSize = 0;
    u16 u16FrameSeqNum = 0;
    u8 *pFrameDataBuf = NULL;

    // 1.文件上传未启动
	if (UPLOAD_DATA != g_stUploadFile.m_u8ProcessState)
	{
		g_stModbusRxMsg.m_eErrorType = UPLOAD_DATA_ERR1;
		return;
	}

    g_stUploadFile.m_u8ProcessState = UPLOAD_DATA;
	
	// 2.校验数据长度
	if (UPLOAD_DATA_DATA_LEN != pu8RecvMsg[UPLOAD_DATA_DATA_LEN_INDEX])
	{
		g_stModbusRxMsg.m_eErrorType = UPLOAD_DATA_ERR2;
		return;
	}

	// 4.校验文件类型
	u8FileType = pu8RecvMsg[UPLOAD_DATA_FILE_TYPE_INDEX];
	if (u8FileType != g_stUploadFile.m_u8FileType)
	{
		g_stModbusRxMsg.m_eErrorType = UPLOAD_DATA_ERR3;
		return;
	}

	// 5.判断帧序号，读取上传文件的帧数据
	u16FrameSeqNum = BUILD_UINT16(pu8RecvMsg[UPLOAD_DATA_FRAME_NO_INDEX + 1], 
                                  pu8RecvMsg[UPLOAD_DATA_FRAME_NO_INDEX]);

	if (u8FileType == BOARD_ELABEL_FILE)
	{
	    if ((u16FrameSeqNum == g_stUploadFile.m_u16MaxFrame) &&
	        (g_stUploadFile.m_u32FileSize % 4 != 0))
	    {
	        // 最后一帧减去之前补u32FileSize为4的倍数的字节数
	        g_stUploadFile.m_u8FrameSize = g_stUploadFile.m_u8FrameSize - (4 - (g_stUploadFile.m_u32FileSize % 4));
	    }
	}
	DRV_Printf("m_u8FrameSize = %d\n", g_stUploadFile.m_u8FrameSize);

	pFrameDataBuf = DynMemGet(g_stUploadFile.m_u8FrameSize);
    if (pFrameDataBuf == NULL)
    {
        DRV_Printf("ProcFileUploadData DynMemGet failed!\n");
        return ;
    }
    memset(pFrameDataBuf, 0, g_stUploadFile.m_u8FrameSize);

    DRV_Printf("u16FrameSeqNum: %d, m_u16CurFrameSeqNum: %d\n", u16FrameSeqNum, g_stUploadFile.m_u16CurFrameSeqNum);

    //PrintFrameData(g_stUploadFile.m_u8FrameSize, pFrameDataBuf);
    
    // 根据读取Flash的起始地址，将帧数据读取到缓存中
    if ((u16FrameSeqNum == g_stUploadFile.m_u16CurFrameSeqNum + 1) &&
        (u16FrameSeqNum <= g_stUploadFile.m_u16MaxFrame) &&
        (g_stUploadFile.m_u32FlashReadStartAddr <= g_stUploadFile.m_u32FlashReadEndAddr))
    {
        DRV_FlashRead(g_stUploadFile.m_u32FlashReadStartAddr, 
                      pFrameDataBuf,
                      g_stUploadFile.m_u8FrameSize);
        g_stUploadFile.m_u32FlashReadStartAddr += g_stUploadFile.m_u8FrameSize;
        g_stUploadFile.m_u16CurFrameSeqNum++;
    }
	else
	{
	    g_stModbusRxMsg.m_eErrorType = UPLOAD_DATA_ERR5;
		return;
	}

    DRV_Printf("m_u8FrameSize = %d\n", g_stUploadFile.m_u8FrameSize);
	// 根据缓存中的帧数据来计算文件CRC
	g_stUploadFile.m_u16FileCRC = CalcUsaCrc16ByFunc(pFrameDataBuf, g_stUploadFile.m_u8FrameSize, g_stUploadFile.m_u16FileCRC);

    ProcFileUploadDataReply(u16FrameSeqNum, pFrameDataBuf);

    DynMemFree(pFrameDataBuf);
    pFrameDataBuf = NULL;
    
    DRV_Printf("ProcFileUploadData stop... \n");
}

/******************************************************************************
* Function Name  	: ProcFileUploadDataFinish
* Description    	: 处理主机下发的上传文件数据完成命令 
* Input          	: pu8RecvMsg -- 消息数据
* Output         	: None
* Return         	: None
* Author			: wwx423495     2017/3/14
* Others			: 主机下发的数据格式为
*                   1byte    1byte     1byte      1byte      1byte      2byte
*                   地址位   功能码    子功能码   数据长度   文件类型   crc  
********************************************************************************/
static void ProcFileUploadDataFinish(u8 *pu8RecvMsg)
{
    DRV_Printf("ProcFileUploadDataFinish start... \n");
	u8 u8FileType = g_stUploadFile.m_u8FileType;
    // 测试数据: 00 41 0C 01 90 F1 C3

    // 1.文件上传未启动
	if ((UPLOAD_DATA != g_stUploadFile.m_u8ProcessState)
         && (UPLOAD_END != g_stUploadFile.m_u8ProcessState))
	{
		g_stModbusRxMsg.m_eErrorType = UPLOAD_END_ERR1;
		return;
	}
    
    g_stUploadFile.m_u8ProcessState = UPLOAD_END;	
	// 2.校验数据长度
	if (UPLOAD_END_DATA_LEN != pu8RecvMsg[UPLOAD_END_DATA_LEN_INDEX])
	{
		g_stModbusRxMsg.m_eErrorType = UPLOAD_END_ERR2;
		return;
	}

	// 3.校验文件类型
	if (pu8RecvMsg[UPLOAD_END_FILE_TYPE_INDEX] != g_stUploadFile.m_u8FileType)
	{
		g_stModbusRxMsg.m_eErrorType = UPLOAD_END_ERR3;
		return;
	}

	switch(u8FileType)
	{
	case WIRELESS_DATA_FILE:
		s_stCycRecTable[1].m_u32RecStartSide =(s_stCycRecTable[1].m_u32RecStopSide + 1) % s_stCycRecTable[1].m_u16QueueLen; ;
		s_stCycRecTable[1].m_u32RecStartAddr = s_stCycRecTable[1].m_u32SideStAddrQueue[s_stCycRecTable[1].m_u32RecStartSide];
        //DRV_Printf("ProcFileUploadDataFinish -- m_u32RecStartSide = %d\n", s_stCycRecTable[1].m_u32RecStartSide);
		//DRV_Printf("ProcFileUploadDataFinish -- m_u32RecStartAddr = 0%X\n", s_stCycRecTable[1].m_u32RecStartAddr);
		break;
		
	case RUN_LOG_FILE:
		s_stCycRecTable[0].m_u32RecStartSide =(s_stCycRecTable[0].m_u32RecStopSide + 1) % s_stCycRecTable[0].m_u16QueueLen; ;
		s_stCycRecTable[0].m_u32RecStartAddr = s_stCycRecTable[0].m_u32SideStAddrQueue[s_stCycRecTable[0].m_u32RecStartSide];
		break;
		
	default:
		break;
	}

    // 清空当前帧号，以便下次数据接收重新计数
	g_stUploadFile.m_u16CurFrameSeqNum = 0;

    ProcFileUploadDataFinishReply();

    DRV_Printf("ProcFileUploadDataFinish stop... \n");
}

/*******************************************************************************
* Function Name  	: ProcQueryFileType
* Description    	: 处理主机下发的查询文件类型列表命令 
* Input          	: pu8RecvMsg -- 消息数据
* Output         	: None
* Return         	: None
* Author			: 
* Others			: None
********************************************************************************/
static void ProcQueryFileType(u8 *pu8RecvMsg)
{

}

/*******************************************************************************
* Function Name  	: ProcClearAlarm
* Description    	: 处理主机下发的查询告警清除命令
* Input          	: pu8RecvMsg -- 消息数据
* Output         	: None
* Return         	: None
* Author			: 
* Others			: None
********************************************************************************/
static void ProcClearAlarm(u8 *pu8RecvMsg)
{

}

/*******************************************************************************
* Function Name  	: ProcDataTransparentTransfer
* Description    	: 处理主机下发的数据透传命令
* Input          	: pu8RecvMsg -- 消息数据
* Output         	: None
* Return         	: None
* Author			: 
* Others			: 主机下发的数据格式为
*                   1byte    1byte   1byte     1byte     2byte     2byte     nbyte                                        2byte  
*                   地址位   功能码  子功能码  数据长度  软件标识  数据长度  Data(设备网络地址(2byte) + Data (N-2 byte))  crc   
********************************************************************************/
static void ProcDataTransparentTransfer(u8 *pu8RecvMsg)
{
    // 测试数据: 00 41 20 0B 01 08 00 00 FF FF 00 01 02 03 04 05 50 E3 -- IBAT的广播数据帧
    DRV_Printf("ProcDataTransparentTransfer start .. \n");

    BOOL bNetStatus = 0;                    // 当前Zigbee设备的无线网络状态
    afAddrType_t SendDstAddr;               // 与当前设备进行通信的设备目的地址
    u8  u8Option = AF_DISCV_ROUTE;          // 操作选项
    u16 u16SoftWareId = 0;                  // 设备类型(无线电表或是IBAT)
    u16 u16ClusterId = 0;                   // 设备的簇ID -- 与设备类型一一对应
    u16 u16NetAddr = 0;                     // 设备的通信网络地址(广播模式时网络地址均为0xFFFF)
    u8  u8TransID = 0;                      // 透传ID
    u8  u8DataLen = 0;                      // 将要发送的数据长度
    u8 *pu8SendData = NULL;                 // 将要发送的数据的指针
    u8 *pu8TmpData = NULL;
    u16 u16DevDataLen = 0;
    u8  u8Ret = 0;

    // TODO: 解析透传数据之前，判断下当前Zigbee设备的无线网络状态，再决定要不要发送数据 !!
    /*
    if (DATA_GetSigValue(u16 u16SigId, DATA_SIGNAL_U * puSigValue))
    {
        return ;
    }
    */

    u8DataLen = pu8RecvMsg[MDS_TRANSPARENT_TRANSFER_DATA_LEN_INDEX];
    
    // 申请内存
    pu8TmpData = (u8 *)DynMemGet(u8DataLen);
    if (pu8TmpData == NULL)
    {
        DRV_Printf("pu8TmpData Mem get failed!\n");
        return ;
    }

    // 透传数据长度不包含设备网络地址(2byte)
    u8DataLen = u8DataLen - 2;

    // 保存透传数据的指针
    pu8SendData = pu8TmpData;

    // 取出设备的数据长度减去2
    u16DevDataLen = BUILD_UINT16(pu8RecvMsg[MDS_TRANSPARENT_TRANSFER_DEV_DATA_LEN_INDEX + 1], 
                                 pu8RecvMsg[MDS_TRANSPARENT_TRANSFER_DEV_DATA_LEN_INDEX]) - 2;
    //DRV_Printf("u16DevDataLen: %d\n", u16DevDataLen);

    // 取出设备的SoftWareId进行判断，如果是无线电表类型的设备，需要将软件ID打包进透传数据
    // 如果是IBAT类型的设备，则不需要将软件ID打包进透传数据
    u16SoftWareId = BUILD_UINT16(pu8RecvMsg[MDS_TRANSPARENT_TRANSFER_DEV_SOFTWARE_ID_INDEX + 1],
                                 pu8RecvMsg[MDS_TRANSPARENT_TRANSFER_DEV_SOFTWARE_ID_INDEX]);

    if (u16SoftWareId == ZIGBEE_GENERAL_CLUSTER_ID)                     // Zigbee通用命令ID
    {
        u16ClusterId = IBAT_ZIGBEE_CLUSTER;
    }
    else if (u16SoftWareId == IBAT_SOFTWARE_ID)                         // 设备类型为IBAT
    {
        u16ClusterId = IBAT_CLUSTER_ID;
    }
    else if (u16SoftWareId == WIRELESS_ELECTRICITY_METER_SOFTWARE_ID)   // 设备类型为无线电表
    {
        u16ClusterId = WIRELESS_ELECTRICITY_METER_CLUSTER_ID;
    }

    // 重新打包设备真正的数据进透传数据中
    (void *)memcpy(pu8TmpData, &pu8RecvMsg[MDS_TRANSPARENT_TRANSFER_DEV_DATA_INDEX], u16DevDataLen); 

    // 获取设备的网络地址
    u16NetAddr = BUILD_UINT16(pu8RecvMsg[MDS_TRANSPARENT_TRANSFER_DEV_NET_ADDR_INDEX + 1], 
                              pu8RecvMsg[MDS_TRANSPARENT_TRANSFER_DEV_NET_ADDR_INDEX]);

    //DRV_Printf("u16NetAddr: 0x%X\n", u16NetAddr);
    
    // 判断是广播模式还是单播模式
    if(u16NetAddr == 0xFFFF)
    {
        SendDstAddr.addrMode = (afAddrMode_t)AddrBroadcast;     // 广播模式
        SendDstAddr.addr.shortAddr = 0xFFFF;
    }
    else
    {
        SendDstAddr.addrMode = (afAddrMode_t)Addr16Bit;         // 单播模式
        SendDstAddr.addr.shortAddr = u16NetAddr;
        u8Option = u8Option | AF_ACK_REQUEST;
    }
    SendDstAddr.endPoint = g_stZigbeeEndPointDesc.endPoint;

    // Zigbee无线发送数据
    // TODO: 注意! 如果增加了无线电表设备，g_stZigbeeEndPointDesc内部的参数需要增加无线电表的Cluster ID
    u8Ret = AF_DataRequest(&SendDstAddr, &g_stZigbeeEndPointDesc,
                           u16ClusterId,
                           (byte)u16DevDataLen,
                           (byte *)pu8SendData,
                           &u8TransID,
                           u8Option, AF_DEFAULT_RADIUS);

    ProcDataTransparentTransferReply(pu8RecvMsg);
    
    // 释放内存 -- 将内存归还给"动态内存"块
    DynMemFree(pu8TmpData);
    pu8TmpData = NULL;

    // 此处发送空主要是为了解决接收中断产生一次后，不发送数据则无法继续接收中断数据的问题
    //DRV_RS485Send("  ", 2);
    
    DRV_Printf("ProcDataTransparentTransfer stop .. \n");
}
